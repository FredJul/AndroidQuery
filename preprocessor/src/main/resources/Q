package com.memtrip.sqlking.gen;

import android.database.Cursor;
import android.content.ContentValues;
import com.memtrip.sqlking.common.SQLQuery;
import com.memtrip.sqlking.common.Resolver;

<#list tables as table>
import ${table.getPackage()}.${table.getName()};
</#list>

import java.util.List;
import java.util.ArrayList;

public class Q {

    public static class DefaultResolver implements Resolver {

        @Override
        public SQLQuery getSQLQuery(Class<?> classDef) {
            <#assign isAssignableFrom><#list tables as table>
            } else if (classDef.isAssignableFrom(${table.getName()?cap_first}.class)) {
                return new ${table.getName()?cap_first}SQLQuery();
            </#list>
            }</#assign>
            ${isAssignableFrom?remove_beginning("            } else ")} else {
                throw new IllegalStateException("Please ensure all SQL tables are annotated with @Table");
            }
        }
    }
<#list tables as table>
<#assign getColumnNames><#list table.getMembers() as member>"${member.getName()}",</#list></#assign>
<#assign unionInsertColumnNames><#list table.getMembers() as member>${member.getName()},</#list></#assign>

    public static class ${table.getName()?cap_first}SQLQuery implements SQLQuery {
        <#list table.getMembers() as member>
        public static final String ${member.getName()?upper_case} = "${member.getName()}";
        </#list>

        @Override
        public String getTableName() {
            return "${table.getName()}";
        }

        @Override
        public String getTableInsertQuery() {
            return ${assembleCreateTable(table)}
        }

        @Override
        public String[] buildUnionInsertQuery(Object[] modelsToInsert) {
            List<List<Object>> chunks = new ArrayList<>();
            List<Object> models = new ArrayList<>();

            for (int i = 0; i < modelsToInsert.length; i++) {
                models.add(modelsToInsert[i]);

                if ((i+1) % 500 == 0) {
                    chunks.add(new ArrayList<>(models));
                    models.clear();
                }
            }

            if (models.size() > 0) {
                chunks.add(models);
            }

            String[] unionInsertQueries = new String[chunks.size()];
            for (int i = 0; i < chunks.size(); i++) {
                unionInsertQueries[i] = buildInsertQuery(chunks.get(i));
            }

            return unionInsertQueries;
        }

        private String buildInsertQuery(List<Object> models) {
            StringBuilder sb = new StringBuilder();

            sb.append("INSERT INTO ${table.getName()?cap_first} ");

            for (int i = 0; i < models.size(); i++) {
                ${table.getName()} ${table.getName()?lower_case} = (${table.getName()})models.get(i);

                if (i == 0){
                    sb.append("(${unionInsertColumnNames?remove_ending(",")}) ");
                    sb.append("SELECT ");
                    <#list table.getMembers() as member>
                    <#assign getter>${table.getName()?lower_case}.get${member.getName()?cap_first}()</#assign>
                    sb.append("${getInsertValue(member.getType(),getter)} AS ${member.getName()}, ");
                    </#list>
                    sb.delete(sb.length()-2,sb.length());
                } else {
                    sb.append(" UNION ALL SELECT ");
                    <#list table.getMembers() as member>
                    <#assign getter>${table.getName()?lower_case}.get${member.getName()?cap_first}()</#assign>
                    sb.append("${getInsertValue(member.getType(),getter)}, ");
                    </#list>
                    sb.delete(sb.length()-2,sb.length());
                }
            }

            return sb.toString();
        }

        private String assembleBlob(byte[] val) {
            if (val != null) {
                StringBuilder sb = new StringBuilder();

                for (byte b : val)
                    sb.append(String.format("%02X ", b));

                return sb.toString();
            } else {
                return "NULL";
            }
        }

        @Override
        public ${table.getName()?cap_first}[] retrieveSQLSelectResults(Cursor cursor) {
            ${table.getName()?cap_first}[] result = new ${table.getName()?cap_first}[cursor.getCount()];

            cursor.moveToFirst();
            for (int i = 0; !cursor.isAfterLast(); i++) {
                ${table.getName()?cap_first} ${table.getName()?lower_case} = new ${table.getName()?cap_first}();

                for (int x = 0; x < cursor.getColumnCount(); x++) {
                <#assign retrieveSQLSelectResults><#list table.getMembers() as member>
                    } else if (cursor.getColumnName(x).equals(${member.getName()?upper_case})) {
                        ${table.getName()?lower_case}.set${member.getName()?cap_first}(${getCursorGetter(member.getType())});
                    </#list>
                    }</#assign>
                    ${retrieveSQLSelectResults?remove_beginning("                    } else ")}
                }

                result[i] = ${table.getName()?lower_case};
                cursor.moveToNext();
            }

            cursor.close();

            return result;
        }

        @Override
        public String[] getColumnNames() {
            return new String[]{${getColumnNames?remove_ending(",")}};
        }

        @Override
        public ContentValues getContentValues(Object model) {
            ${table.getName()?cap_first} ${table.getName()?lower_case} = (${table.getName()?cap_first})model;

            ContentValues contentValues = new ContentValues();
            <#list table.getMembers() as member>
            contentValues.put(${member.getName()?upper_case}, ${table.getName()?lower_case}.get${member.getName()?cap_first}());
            </#list>

            return contentValues;
        }
    }
</#list>
}